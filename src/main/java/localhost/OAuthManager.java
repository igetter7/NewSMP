/*
 * NewSMPShopManagementPlatformLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package localhost;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;


/**
 * Utility class for OAuth 2 authorization and token management
 */
public class OAuthManager {
    /**
     * The reference to singleton instance of this class
     */
    private static OAuthManager instance;

    private static final Object syncRoot = new Object();

    /**
     * Constructor
     */
    private OAuthManager() {
    }

    /**
     * Returns the *Singleton* instance of this class.
     * @return Singleton instance
     */
    public static OAuthManager getInstance() {
        if (instance == null) {
            synchronized (syncRoot) {
                if (instance == null) {
                    instance = new OAuthManager();
                }
            }
        }
        return instance;
    }

    /**
     * Build an authorization URL for taking the user's consent to access data
     * @param state An opaque state string
     * @param additionalParameters Additional parameters to add the the authorization URL
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state,
            final Map<String, String> additionalParameters) {

        // the uri for api requests
        StringBuilder queryBuilder = new StringBuilder(Configuration.getBaseUri(Servers.AUTH_SERVER));
        queryBuilder.append("/auth");

        // build query params
        Map<String, Object> queryParameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 1L;
            {
                put("response_type", "token");
                put("client_id", Configuration.oAuthClientId);
                put("redirect_uri", Configuration.oAuthRedirectUri);
                put("state", state);
            }
        };

        // process optional query parameters
        if (additionalParameters != null)
            queryParameters.putAll(additionalParameters);

        APIHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters);

        // validate and preprocess url
        return APIHelper.cleanUrl(queryBuilder);
    }
    
    /**
     * Build an authorization URL for taking the user's consent to access data
     * @return Authorization URL
     */
    public String buildAuthorizationUrl() {
        return buildAuthorizationUrl(null, null);
    }
    /**
     * Build an authorization URL for taking the user's consent to access data
     * @param state An opaque state string
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state) {
        return buildAuthorizationUrl(state, null);
    }

}
